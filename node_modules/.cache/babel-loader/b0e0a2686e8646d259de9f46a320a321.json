{"ast":null,"code":"var _jsxFileName = \"E:\\\\Web-Dev\\\\React learing\\\\react-rmdb\\\\src\\\\components\\\\SearchBar\\\\index.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect, useRef } from 'react';\nimport PropTypes from 'prop-types'; // Image\n\nimport searchIcon from \"../../images/search-icon.svg\"; // Styles\n\nimport { Wrapper, Content } from './SearchBar.styles';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst SearchBar = ({\n  setSearchTerm\n}) => {\n  _s();\n\n  const [state, setState] = useState('');\n  const initial = useRef(true);\n  useEffect(() => {\n    if (initial.current) {\n      initial.current = false;\n      return;\n    }\n\n    const timer = setTimeout(() => {\n      setSearchTerm(state);\n    }, 500);\n    return () => clearTimeout(timer);\n  }, [setSearchTerm, state]);\n  return /*#__PURE__*/_jsxDEV(Wrapper, {\n    children: /*#__PURE__*/_jsxDEV(Content, {\n      children: [/*#__PURE__*/_jsxDEV(\"img\", {\n        src: searchIcon,\n        alt: \"search-icon\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 28,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        placeholder: \"Search Movie\",\n        onChange: event => setState(event.currentTarget.value),\n        value: state\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 29,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 27,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 26,\n    columnNumber: 5\n  }, this);\n};\n\n_s(SearchBar, \"j4nMfssbIXgIaLQ7f2o61Ed7/hg=\");\n\n_c = SearchBar;\nSearchBar.propTypes = {\n  callback: PropTypes.func\n};\nexport default SearchBar;\n\nvar _c;\n\n$RefreshReg$(_c, \"SearchBar\");","map":{"version":3,"sources":["E:/Web-Dev/React learing/react-rmdb/src/components/SearchBar/index.js"],"names":["React","useState","useEffect","useRef","PropTypes","Wrapper","Content","SearchBar","setSearchTerm","state","setState","initial","current","timer","setTimeout","clearTimeout","searchIcon","event","currentTarget","value","propTypes","callback","func"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,EAAqCC,MAArC,QAAmD,OAAnD;AACA,OAAOC,SAAP,MAAsB,YAAtB,C,CACA;;uDAEA;;AACA,SAASC,OAAT,EAAkBC,OAAlB,QAAiC,oBAAjC;;;AAEA,MAAMC,SAAS,GAAG,CAAC;AAAEC,EAAAA;AAAF,CAAD,KAAuB;AAAA;;AACvC,QAAM,CAACC,KAAD,EAAQC,QAAR,IAAoBT,QAAQ,CAAC,EAAD,CAAlC;AACA,QAAMU,OAAO,GAAGR,MAAM,CAAC,IAAD,CAAtB;AAEAD,EAAAA,SAAS,CAAC,MAAM;AACd,QAAIS,OAAO,CAACC,OAAZ,EAAqB;AACnBD,MAAAA,OAAO,CAACC,OAAR,GAAkB,KAAlB;AACA;AACD;;AAED,UAAMC,KAAK,GAAGC,UAAU,CAAC,MAAM;AAC7BN,MAAAA,aAAa,CAACC,KAAD,CAAb;AACD,KAFuB,EAErB,GAFqB,CAAxB;AAIA,WAAO,MAAMM,YAAY,CAACF,KAAD,CAAzB;AACD,GAXQ,EAWN,CAACL,aAAD,EAAgBC,KAAhB,CAXM,CAAT;AAaA,sBACE,QAAC,OAAD;AAAA,2BACE,QAAC,OAAD;AAAA,8BACE;AAAK,QAAA,GAAG,EAAEO,UAAV;AAAsB,QAAA,GAAG,EAAC;AAA1B;AAAA;AAAA;AAAA;AAAA,cADF,eAEE;AACE,QAAA,IAAI,EAAC,MADP;AAEE,QAAA,WAAW,EAAC,cAFd;AAGE,QAAA,QAAQ,EAAEC,KAAK,IAAIP,QAAQ,CAACO,KAAK,CAACC,aAAN,CAAoBC,KAArB,CAH7B;AAIE,QAAA,KAAK,EAAEV;AAJT;AAAA;AAAA;AAAA;AAAA,cAFF;AAAA;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,UADF;AAaD,CA9BD;;GAAMF,S;;KAAAA,S;AAgCNA,SAAS,CAACa,SAAV,GAAsB;AACpBC,EAAAA,QAAQ,EAAEjB,SAAS,CAACkB;AADA,CAAtB;AAIA,eAAef,SAAf","sourcesContent":["import React, { useState, useEffect, useRef } from 'react';\nimport PropTypes from 'prop-types';\n// Image\nimport searchIcon from '../../images/search-icon.svg';\n// Styles\nimport { Wrapper, Content } from './SearchBar.styles';\n\nconst SearchBar = ({ setSearchTerm }) => {\n  const [state, setState] = useState('');\n  const initial = useRef(true);\n\n  useEffect(() => {\n    if (initial.current) {\n      initial.current = false;\n      return;\n    }\n\n    const timer = setTimeout(() => {\n      setSearchTerm(state);\n    }, 500);\n\n    return () => clearTimeout(timer);\n  }, [setSearchTerm, state]);\n\n  return (\n    <Wrapper>\n      <Content>\n        <img src={searchIcon} alt='search-icon' />\n        <input\n          type='text'\n          placeholder='Search Movie'\n          onChange={event => setState(event.currentTarget.value)}\n          value={state}\n        />\n      </Content>\n    </Wrapper>\n  );\n};\n\nSearchBar.propTypes = {\n  callback: PropTypes.func\n};\n\nexport default SearchBar;\n"]},"metadata":{},"sourceType":"module"}
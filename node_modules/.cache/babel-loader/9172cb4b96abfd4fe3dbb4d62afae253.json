{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useState, useEffect } from 'react'; // API\n\nimport API from '../API'; // Helpers\n\nimport { isPersistedState } from '../helpers';\nconst initialState = {\n  page: 0,\n  results: [],\n  total_pages: 0,\n  total_results: 0\n};\nexport const useHomeFetch = () => {\n  _s();\n\n  const [searchTerm, setSearchTerm] = useState('');\n  const [state, setState] = useState(initialState);\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState(false);\n  const [isLoadingMore, setIsLoadingMore] = useState(false);\n\n  const fetchMovies = async (page, searchTerm = '') => {\n    try {\n      setError(false);\n      setLoading(true);\n      const movies = await API.fetchMovies(searchTerm, page);\n      setState(prev => ({ ...movies,\n        results: page > 1 ? [...prev.results, ...movies.results] : [...movies.results]\n      }));\n    } catch (error) {\n      setError(true);\n    }\n\n    setLoading(false);\n  }; // Search and initial\n\n\n  useEffect(() => {\n    if (!searchTerm) {\n      const sessionState = isPersistedState('homeState');\n\n      if (sessionState) {\n        console.log('Grabbing from sessionStorage');\n        setState(sessionState);\n        return;\n      }\n    }\n\n    console.log('Grabbing from API');\n    setState(initialState);\n    fetchMovies(1, searchTerm);\n  }, [searchTerm]); // Load More\n\n  useEffect(() => {\n    if (!isLoadingMore) return;\n    fetchMovies(state.page + 1, searchTerm);\n    setIsLoadingMore(false);\n  }, [isLoadingMore, searchTerm, state.page]); // Write to sessionStorage\n\n  useEffect(() => {\n    if (!searchTerm) sessionStorage.setItem('homeState', JSON.stringify(state));\n  }, [searchTerm, state]);\n  return {\n    state,\n    loading,\n    error,\n    searchTerm,\n    setSearchTerm,\n    setIsLoadingMore\n  };\n};\n\n_s(useHomeFetch, \"h4RUEubeaoJo530jU7BUySnkVAY=\");","map":{"version":3,"sources":["E:/Web-Dev/React learing/react-rmdb/src/hooks/useHomeFetch.js"],"names":["useState","useEffect","API","isPersistedState","initialState","page","results","total_pages","total_results","useHomeFetch","searchTerm","setSearchTerm","state","setState","loading","setLoading","error","setError","isLoadingMore","setIsLoadingMore","fetchMovies","movies","prev","sessionState","console","log","sessionStorage","setItem","JSON","stringify"],"mappings":"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","sourcesContent":["import { useState, useEffect } from 'react';\n// API\nimport API from '../API';\n// Helpers\nimport { isPersistedState } from '../helpers';\n\nconst initialState = {\n  page: 0,\n  results: [],\n  total_pages: 0,\n  total_results: 0\n};\n\nexport const useHomeFetch = () => {\n  const [searchTerm, setSearchTerm] = useState('');\n  const [state, setState] = useState(initialState);\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState(false);\n  const [isLoadingMore, setIsLoadingMore] = useState(false);\n\n  const fetchMovies = async (page, searchTerm = '') => {\n    try {\n      setError(false);\n      setLoading(true);\n\n      const movies = await API.fetchMovies(searchTerm, page);\n\n      setState(prev => ({\n        ...movies,\n        results:\n          page > 1 ? [...prev.results, ...movies.results] : [...movies.results]\n      }));\n    } catch (error) {\n      setError(true);\n    }\n    setLoading(false);\n  };\n\n  // Search and initial\n  useEffect(() => {\n    if (!searchTerm) {\n      const sessionState = isPersistedState('homeState');\n\n      if (sessionState) {\n        console.log('Grabbing from sessionStorage');\n        setState(sessionState);\n        return;\n      }\n    }\n    console.log('Grabbing from API');\n    setState(initialState);\n    fetchMovies(1, searchTerm);\n  }, [searchTerm]);\n\n  // Load More\n  useEffect(() => {\n    if (!isLoadingMore) return;\n\n    fetchMovies(state.page + 1, searchTerm);\n    setIsLoadingMore(false);\n  }, [isLoadingMore, searchTerm, state.page]);\n\n  // Write to sessionStorage\n  useEffect(() => {\n    if (!searchTerm) sessionStorage.setItem('homeState', JSON.stringify(state));\n  }, [searchTerm, state]);\n\n  return { state, loading, error, searchTerm, setSearchTerm, setIsLoadingMore };\n};\n"]},"metadata":{},"sourceType":"module"}
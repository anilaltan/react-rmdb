{"ast":null,"code":"import React from'react';import{useParams}from'react-router-dom';// Config\nimport{IMAGE_BASE_URL,POSTER_SIZE}from'../config';// Components\nimport BreadCrumb from'./BreadCrumb';import Grid from'./Grid';import Spinner from'./Spinner';import MovieInfo from'./MovieInfo';import MovieInfoBar from'./MovieInfoBar';import Actor from'./Actor';// Hook\nimport{useMovieFetch}from'../hooks/useMovieFetch';// Image\nimport NoImage from'../images/no_image.jpg';import{jsx as _jsx}from\"react/jsx-runtime\";import{Fragment as _Fragment}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";var Movie=function Movie(){var _useParams=useParams(),movieId=_useParams.movieId;var _useMovieFetch=useMovieFetch(movieId),movie=_useMovieFetch.state,loading=_useMovieFetch.loading,error=_useMovieFetch.error;if(loading)return/*#__PURE__*/_jsx(Spinner,{});if(error)return/*#__PURE__*/_jsx(\"div\",{children:\"Something went wrong...\"});return/*#__PURE__*/_jsxs(_Fragment,{children:[/*#__PURE__*/_jsx(BreadCrumb,{movieTitle:movie.original_title}),/*#__PURE__*/_jsx(MovieInfo,{movie:movie}),/*#__PURE__*/_jsx(MovieInfoBar,{time:movie.runtime,budget:movie.budget,revenue:movie.revenue}),/*#__PURE__*/_jsx(Grid,{header:\"Actors\",children:movie.actors.map(function(actor){return/*#__PURE__*/_jsx(Actor,{name:actor.name,character:actor.character,imageUrl:actor.profile_path?\"\".concat(IMAGE_BASE_URL).concat(POSTER_SIZE).concat(actor.profile_path):NoImage},actor.credit_id);})})]});};export default Movie;","map":{"version":3,"sources":["E:/Web-Dev/React learing/react-rmdb/src/components/Movie.js"],"names":["React","useParams","IMAGE_BASE_URL","POSTER_SIZE","BreadCrumb","Grid","Spinner","MovieInfo","MovieInfoBar","Actor","useMovieFetch","NoImage","Movie","movieId","movie","state","loading","error","original_title","runtime","budget","revenue","actors","map","actor","name","character","profile_path","credit_id"],"mappings":"AAAA,MAAOA,CAAAA,KAAP,KAAkB,OAAlB,CACA,OAASC,SAAT,KAA0B,kBAA1B,CACA;AACA,OAASC,cAAT,CAAyBC,WAAzB,KAA4C,WAA5C,CACA;AACA,MAAOC,CAAAA,UAAP,KAAuB,cAAvB,CACA,MAAOC,CAAAA,IAAP,KAAiB,QAAjB,CACA,MAAOC,CAAAA,OAAP,KAAoB,WAApB,CACA,MAAOC,CAAAA,SAAP,KAAsB,aAAtB,CACA,MAAOC,CAAAA,YAAP,KAAyB,gBAAzB,CACA,MAAOC,CAAAA,KAAP,KAAkB,SAAlB,CACA;AACA,OAASC,aAAT,KAA8B,wBAA9B,CACA;AACA,MAAOC,CAAAA,OAAP,KAAoB,wBAApB,C,6IAEA,GAAMC,CAAAA,KAAK,CAAG,QAARA,CAAAA,KAAQ,EAAM,CAClB,eAAoBX,SAAS,EAA7B,CAAQY,OAAR,YAAQA,OAAR,CAEA,mBAAyCH,aAAa,CAACG,OAAD,CAAtD,CAAeC,KAAf,gBAAQC,KAAR,CAAsBC,OAAtB,gBAAsBA,OAAtB,CAA+BC,KAA/B,gBAA+BA,KAA/B,CAEA,GAAID,OAAJ,CAAa,mBAAO,KAAC,OAAD,IAAP,CACb,GAAIC,KAAJ,CAAW,mBAAO,gDAAP,CAEX,mBACE,wCACE,KAAC,UAAD,EAAY,UAAU,CAAEH,KAAK,CAACI,cAA9B,EADF,cAEE,KAAC,SAAD,EAAW,KAAK,CAAEJ,KAAlB,EAFF,cAGE,KAAC,YAAD,EACE,IAAI,CAAEA,KAAK,CAACK,OADd,CAEE,MAAM,CAAEL,KAAK,CAACM,MAFhB,CAGE,OAAO,CAAEN,KAAK,CAACO,OAHjB,EAHF,cAQE,KAAC,IAAD,EAAM,MAAM,CAAC,QAAb,UACGP,KAAK,CAACQ,MAAN,CAAaC,GAAb,CAAiB,SAAAC,KAAK,qBACrB,KAAC,KAAD,EAEE,IAAI,CAAEA,KAAK,CAACC,IAFd,CAGE,SAAS,CAAED,KAAK,CAACE,SAHnB,CAIE,QAAQ,CACNF,KAAK,CAACG,YAAN,WACOzB,cADP,SACwBC,WADxB,SACsCqB,KAAK,CAACG,YAD5C,EAEIhB,OAPR,EACOa,KAAK,CAACI,SADb,CADqB,EAAtB,CADH,EARF,GADF,CAyBD,CAjCD,CAmCA,cAAehB,CAAAA,KAAf","sourcesContent":["import React from 'react';\nimport { useParams } from 'react-router-dom';\n// Config\nimport { IMAGE_BASE_URL, POSTER_SIZE } from '../config';\n// Components\nimport BreadCrumb from './BreadCrumb';\nimport Grid from './Grid';\nimport Spinner from './Spinner';\nimport MovieInfo from './MovieInfo';\nimport MovieInfoBar from './MovieInfoBar';\nimport Actor from './Actor';\n// Hook\nimport { useMovieFetch } from '../hooks/useMovieFetch';\n// Image\nimport NoImage from '../images/no_image.jpg';\n\nconst Movie = () => {\n  const { movieId } = useParams();\n\n  const { state: movie, loading, error } = useMovieFetch(movieId);\n\n  if (loading) return <Spinner />;\n  if (error) return <div>Something went wrong...</div>;\n\n  return (\n    <>\n      <BreadCrumb movieTitle={movie.original_title} />\n      <MovieInfo movie={movie} />\n      <MovieInfoBar\n        time={movie.runtime}\n        budget={movie.budget}\n        revenue={movie.revenue}\n      />\n      <Grid header='Actors'>\n        {movie.actors.map(actor => (\n          <Actor\n            key={actor.credit_id}\n            name={actor.name}\n            character={actor.character}\n            imageUrl={\n              actor.profile_path\n                ? `${IMAGE_BASE_URL}${POSTER_SIZE}${actor.profile_path}`\n                : NoImage\n            }\n          />\n        ))}\n      </Grid>\n    </>\n  );\n};\n\nexport default Movie;\n"]},"metadata":{},"sourceType":"module"}